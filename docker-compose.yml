
services:
  postgres:
    image: postgres:16
    container_name: my_postgres
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "admin", "-d", "mydatabase" ]
      interval: 5s
      timeout: 3s
      retries: 5
    ports:
      - "5433:5432"
    volumes:
#      - ./database:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data

  backend:
    build: ./backend
    container_name: my_backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/uploads:/app/uploads

    command: npm run dev

  frontend:
    build: ./frontend
    container_name: my_frontend
    restart: always
    expose:
      - 80
    depends_on:
      - backend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./frontend/dist:/usr/share/nginx/html
    command: npm run dev -- --host

  nginx:
    image: nginx:stable
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/dist:/usr/share/nginx/html
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: >
      sh -c "certbot certonly --webroot --webroot-path=/var/www/certbot
      --email your-email@example.com --agree-tos --no-eff-email
      -d 38.180.121.64.nip.io"

volumes:
  postgres_data:
